function dotgui

dotInfo = [];
[fname, fpath] = uigetfile('*.mat','Select the config file');

if fname == 0
    dotInfo = createDotInfo
else
    load([fpath fname])
end
        
%STILL NEED TO DEAL WITH KEYPRESS - TIMING ISSUES
% probably a better way to deal with saving files...
%savepath = '/Volumes/touch/matlab/';
%savepath = '/Volumes/maria/matlab/';
savepath = [];

savefile = [];

%  Initialize and hide the GUI as it is being constructed.
dMainFigure = figure('Visible','off','Position',[600,400,500,600]),...
    'HandleVisibility','callback',...
    'Color', get(0,...
    'defaultuicontrolbackgroundcolor');

% Dot Group

Ddotgroup = uipanel('Title','Dots','FontSize',12,...
    'Units', 'normalized', ...
    'Position',[.01 .66 .98 .28]);
%    'Position',[.01 .62 .98 .33]);

% Target Group

Dtargroup = uipanel('Title','Fixation and Targets','FontSize',12,...
    'Units', 'normalized', ...
    'Position',[.01 .33 .98 .32]);
%'Position',[.01 .22 .98 .39]);

% Time Group
Dtimegroup = uipanel('Title','Timing','FontSize',12,...
    'Units', 'normalized', ...
    'Position',[.01 .16 .98 .16]);

% Miscelaneous

dTrialTypes = {'fixed duration','reaction time'};

popuptype = uicontrol('Style','popupmenu', ...
    'String',dTrialTypes, ...
    'Units', 'normalized', ...
    'Position',[0.1 0.88 0.25 0.1], ...
    'Value',dotInfo.trialtype(1), ...
    'Callback',{@popup_type_Callback});

buttonsave = uicontrol('Style','pushbutton', ...
    'Units', 'normalized', ...
    'Position',[0.4 0.94 0.15 0.05], ...
    'String','Load File', ...
    'Callback',{@load_Callback});

buttonsave = uicontrol('Style','pushbutton', ...
    'Units', 'normalized', ...
    'Position',[0.6 0.94 0.15 0.05], ...
    'String','Save File', ...
    'Callback',{@save_Callback});

buttonclose = uicontrol('Style','pushbutton', ...
    'Units', 'normalized', ...
    'Position',[0.8 0.94 0.15 0.05], ...
    'String','Close', ...
    'Callback',{@goEnd_Callback});

%%%%%% Dot Stuff

% coherence

textdotcoh = uicontrol('Style','Text', ...
    'Parent',Ddotgroup, ...
    'Units', 'normalized', ...
    'Position',[0.04 0.85 0.18 0.05], ...
    'String','Dot Coherence');

popupdotcoh = uicontrol('Style','popupmenu', ...
    'String',{dotInfo.cohSet*100 'random'}, ...
    'Parent',Ddotgroup, ...
    'Units', 'normalized', ...
    'Position',[0.04 0.7 0.2 0.05], ...
    'Callback',{@popup_coh_Callback});

buttondotcoh = uicontrol('Style','pushbutton', ...
    'Parent',Ddotgroup, ...
    'Units', 'normalized', ...
    'Position',[0.04 0.45 0.25 0.1], ...
    'String','Change Coh set', ...
    'Callback',{@new_coh_Callback});

editdotcoh = uicontrol('Style','edit', ...
    'Parent',Ddotgroup, ...
    'Units', 'normalized', ...
    'Position',[0.04 0.1 0.7 0.2], ...
    'String',num2str(dotInfo.cohSet), ...
    'Visible','off');

buttondonecoh = uicontrol('Style','pushbutton', ...
    'Parent',Ddotgroup, ...
    'Units', 'normalized', ...
    'Position',[0.04 0.45 0.25 0.1], ...
    'String','Done Changing Coh', ...
    'Visible','off', ...
    'Callback',{@coh_set_Callback});

% Direction

textdotdir = uicontrol('Style','Text', ...
    'Parent',Ddotgroup, ...
    'Units', 'normalized', ...
    'Position',[0.34 0.85 0.18 0.05], ...
    'String','Dot Direction');

popupdotdir = uicontrol('Style','popupmenu', ...
    'String',{dotInfo.dirSet 'random'}, ...
    'Parent',Ddotgroup, ...
    'Units', 'normalized', ...
    'Position',[0.34 0.7 0.2 0.05], ...
    'Callback',{@popup_dir_Callback});

buttondotdir = uicontrol('Style','pushbutton', ...
    'Parent',Ddotgroup, ...
    'Units', 'normalized', ...
    'Position',[0.34 0.45 0.25 0.1], ...
    'String','Change Dir set', ...
    'Callback',{@new_dir_Callback});

editdotdir = uicontrol('Style','edit', ...
    'Parent',Ddotgroup, ...
    'Units', 'normalized', ...
    'Position',[0.04 0.1 0.7 0.2], ...
    'String',num2str(dotInfo.dirSet), ...
    'Visible','off');

buttondonedir = uicontrol('Style','pushbutton', ...
    'Parent',Ddotgroup, ...
    'Units', 'normalized', ...
    'Position',[0.34 0.45 0.25 0.1], ...
    'String','Done Changing Coh', ...
    'Visible','off', ...
    'Callback',{@dir_set_Callback});

% dot speed

textdotspeed = uicontrol('Style','Text', ...
    'Parent',Ddotgroup, ...
    'Units', 'normalized', ...
    'Position',[0.6 0.85 0.15 0.1], ...
    'String','Dot Speed');

editdotspeed = uicontrol('Style','edit', ...
    'Parent',Ddotgroup, ...
    'Units', 'normalized', ...
    'Position',[0.8 0.85 0.15 0.1], ...
    'String',dotInfo.speed);

% dotSize

textdotsize = uicontrol('Style','Text', ...
    'Parent',Ddotgroup, ...
    'Units', 'normalized', ...
    'Position',[0.6 0.7 0.15 0.1], ...
    'String','Dot Size');

editdotsize = uicontrol('Style','edit', ...
    'Parent',Ddotgroup, ...
    'Units', 'normalized', ...
    'Position',[0.8 0.7 0.15 0.1], ...
    'String',dotInfo.dotSize);

% dot color

textdotcolor = uicontrol('Style','Text', ...
    'Parent',Ddotgroup, ...
    'Units', 'normalized', ...
    'Position',[0.74 0.55 0.15 0.1], ...
    'String','Dot Color');

editdotcolor1 = uicontrol('Style','edit', ...
    'Parent',Ddotgroup, ...
    'Units', 'normalized', ...
    'Position',[0.64 0.45 0.1 0.1], ...
    'String',dotInfo.dotColor(1,1));

editdotcolor2 = uicontrol('Style','edit', ...
    'Parent',Ddotgroup, ...
    'Units', 'normalized', ...
    'Position',[0.76 0.45 0.1 0.1], ...
    'String',dotInfo.dotColor(1,2));

editdotcolor3 = uicontrol('Style','edit', ...
    'Parent',Ddotgroup, ...
    'Units', 'normalized', ...
    'Position',[0.88 0.45 0.1 0.1], ...
    'String',dotInfo.dotColor(1,3));

% aperture position

textapos = uicontrol('Style','Text', ...
    'Parent',Ddotgroup, ...
    'Units', 'normalized', ...
    'Position',[0.8 0.25 0.15 0.1], ...
    'String','Aperture [x y d]');

editappos = uicontrol('Style','edit', ...
    'Parent',Ddotgroup, ...
    'Units', 'normalized', ...
    'Position',[0.78 0.1 0.2 0.1], ...
    'String',num2str(dotInfo.apXYD));

% Target and Fixation Information

% tar xy, can be set manually or automatically

DTarTypes = {'manually set','fixation center','aperature center'};

textxyfix = uicontrol('Style','Text', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.02 0.8 0.2 0.15], ...
    'String','How to decide targets positions');

popuptartype = uicontrol('Style','popupmenu', ...
    'Parent',Dtargroup, ...
    'String',DTarTypes, ...
    'Units', 'normalized', ...
    'Position',[0.22 0.87 0.3 0.05], ...
    'Value',dotInfo.auto(1), ...
    'Callback',{@popup_tar_Callback});

textxtar = uicontrol('Style','Text', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.35 0.68 0.05 0.08], ...
    'String','X');

textytar = uicontrol('Style','Text', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.39 0.68 0.05 0.08], ...
    'String','Y');

textxyfix = uicontrol('Style','Text', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.02 0.57 0.25 0.1], ...
    'String','fixation X and Y positions');

editxyfix = uicontrol('Style','edit', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.32 0.57 0.16 0.1], ...
    'String',num2str(dotInfo.fixXY));

textxytar = uicontrol('Style','Text', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.02 0.33 0.25 0.1], ...
    'String','target X and Y positions');

editxytar = uicontrol('Style','edit', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Max',4, ...
    'Position',[0.32 0.23 0.18 0.3], ...
    'String',num2str(dotInfo.tarXY));

% fixation diameter
textdiamfix = uicontrol('Style','Text', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.1 0.07 0.2 0.1], ...
    'String','fixation diameter');

editdiamfix = uicontrol('Style','edit', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.32 0.07 0.16 0.1], ...
    'String',num2str(dotInfo.fixDiam));

% targets diameter
texttarfix = uicontrol('Style','Text', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.58 0.07 0.2 0.1], ...
    'String','target diameter');

edittarfix = uicontrol('Style','edit', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.79 0.07 0.16 0.1], ...
    'String',num2str(dotInfo.tarDiam));

% fix color

textfixcolor = uicontrol('Style','Text', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.7 0.86 0.15 0.1], ...
    'String','Fixation Color');

editfixcolor1 = uicontrol('Style','edit', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.6 0.8 0.1 0.1], ...
    'String',dotInfo.fixColor(1,1));

editfixcolor2 = uicontrol('Style','edit', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.72 0.8 0.1 0.1], ...
    'String',dotInfo.fixColor(1,2));

editfixcolor3 = uicontrol('Style','edit', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.84 0.8 0.1 0.1], ...
    'String',dotInfo.fixColor(1,3));

% targets color

checkboxcolor = uicontrol('Style','Checkbox', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.64 0.65 0.3 0.1], ...
    'String','All Targets Same Color', ...
    'Callback',{@check_color_Callback});

texttarcolor = uicontrol('Style','Text', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.6 0.5 0.3 0.1], ...
    'String','Target Color');

edittarcolor1 = uicontrol('Style','edit', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.6 0.44 0.1 0.1], ...
    'String',dotInfo.tarColor(1,1));

edittarcolor2 = uicontrol('Style','edit', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.72 0.44 0.1 0.1], ...
    'String',dotInfo.tarColor(1,2));

edittarcolor3 = uicontrol('Style','edit', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.84 0.44 0.1 0.1], ...
    'String',dotInfo.tarColor(1,3));

textwrongcolor = uicontrol('Style','Text', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.6 0.3 0.3 0.1], ...
    'Visible', 'off', ...
    'String','InCorrect Targets Color');

editwrongcolor1 = uicontrol('Style','edit', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.6 0.24 0.1 0.1], ...
    'Visible', 'off');

editwrongcolor2 = uicontrol('Style','edit', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.72 0.24 0.1 0.1], ...
    'Visible', 'off');

editwrongcolor3 = uicontrol('Style','edit', ...
    'Parent',Dtargroup, ...
    'Units', 'normalized', ...
    'Position',[0.84 0.24 0.1 0.1], ...
    'Visible', 'off');

% Time Group

% time to fixate
texttimefix = uicontrol('Style','Text', ...
    'Parent',Dtimegroup, ...
    'Units', 'normalized', ...
    'Position',[0.02 0.7 0.3 0.2], ...
    'String','time limit to fixate');

edittimefix = uicontrol('Style','edit', ...
    'Parent',Dtimegroup, ...
    'Units', 'normalized', ...
    'Position',[0.34 0.7 0.16 0.2]);

% fixation to targets on
texttimetar = uicontrol('Style','Text', ...
    'Parent',Dtimegroup, ...
    'Units', 'normalized', ...
    'Position',[0.02 0.4 0.3 0.2], ...
    'String','fixation acquired to targets on');

edittimetar = uicontrol('Style','edit', ...
    'Parent',Dtimegroup, ...
    'Units', 'normalized', ...
    'Position',[0.34 0.4 0.16 0.2]);

% targets to dots on
texttimedots = uicontrol('Style','Text', ...
    'Parent',Dtimegroup, ...
    'Units', 'normalized', ...
    'Position',[0.02 0.1 0.3 0.2], ...
    'String','fixation acquired to dots on');

edittimedots = uicontrol('Style','edit', ...
    'Parent',Dtimegroup, ...
    'Units', 'normalized', ...
    'Position',[0.34 0.1 0.16 0.2]);

% duration dots on
textdurdots = uicontrol('Style','Text', ...
    'Parent',Dtimegroup, ...
    'Units', 'normalized', ...
    'Position',[0.5 0.7 0.3 0.2], ...
    'String','duration (max) dots on');

editdurdots = uicontrol('Style','edit', ...
    'Parent',Dtimegroup, ...
    'Units', 'normalized', ...
    'Position',[0.8 0.7 0.16 0.2]);

% time limit to touch target - reaction time
textreport = uicontrol('Style','Text', ...
    'Parent',Dtimegroup, ...
    'Visible','off', ...
    'Units', 'normalized', ...
    'Position',[0.5 0.4 0.3 0.2], ...
    'String','time limit to touch target');

editreport = uicontrol('Style','edit', ...
    'Visible','off', ...
    'Parent',Dtimegroup, ...
    'Units', 'normalized', ...
    'Position',[0.8 0.4 0.16 0.2]);

% dots off until fixation off - fixed duration
textdotsfix = uicontrol('Style','Text', ...
    'Parent',Dtimegroup, ...
    'Visible','off', ...
    'Units', 'normalized', ...
    'Position',[0.5 0.4 0.3 0.2], ...
    'String','dots off to fix off');

editdotsfix = uicontrol('Style','edit', ...
    'Parent',Dtimegroup, ...
    'Visible','off', ...
    'Units', 'normalized', ...
    'Position',[0.8 0.4 0.16 0.2]);

% time limit to touch target - fixed duration
textfdreport = uicontrol('Style','Text', ...
    'Parent',Dtimegroup, ...
    'Visible','off', ...
    'Units', 'normalized', ...
    'Position',[0.5 0.1 0.3 0.2], ...
    'String','time limit to touch target');

editfdreport = uicontrol('Style','edit', ...
    'Parent',Dtimegroup, ...
    'Visible','off', ...
    'Units', 'normalized', ...
    'Position',[0.8 0.1 0.16 0.2]);

% More Miscenlaneous

dInputTypes = {'keyboard','mouse/touch','choose input'};

popupitype = uicontrol('Style','popupmenu', ...
    'String',dInputTypes, ...
    'Units', 'normalized', ...
    'Position',[0.05 0.05 0.25 0.1], ...
    'Callback',{@popup_itype_Callback});

% checkbox for engaging correction loop
checkboxloop = uicontrol('Style','Checkbox', ...
    'Units', 'normalized', ...
    'Position',[0.05 0.05 0.3 0.05], ...
    'String','Engage correction loop');

% checkbox for changing touch diameter
checkboxbig = uicontrol('Style','Checkbox', ...
    'Units', 'normalized', ...
    'Position',[0.4 0.1 0.3 0.05], ...
    'Callback',{@popup_big_Callback}, ...
    'Visible','off', ...
    'String','Change touch area');

% checkbox for holding
checkboxhold = uicontrol('Style','Checkbox', ...
    'Units', 'normalized', ...
    'Position',[0.4 0.05 0.3 0.05], ...
    'Callback',{@popup_hold_Callback}, ...
    'Visible','off', ...
    'String','touch target once - no hold');

% edit box for new diamters of targets
textbig = uicontrol('Style','Text', ...
    'Units', 'normalized', ...
    'Position',[0.78 0.11 0.16 0.04], ...
    'Visible', 'off', ...
    'String','touch diameters [d d d]');

editbig = uicontrol('Style','edit', ...
    'Units', 'normalized', ...
    'Position',[0.75 0.05 0.2 0.05], ...
    'Visible', 'off', ...
    'String',num2str(dotInfo.touchbig));


% Check to see what is visible and set some values

settimestuff;

if dotInfo.auto(1) ~= 1
    set(textxytar, 'Visible', 'off');
    set(editxytar, 'Visible', 'off');
end

if ~isempty(dotInfo.wrongColor)
    set(textwrongcolor,'Visible','on');
    set(editwrongcolor1,'Visible','on');
    set(editwrongcolor1,'String',dotInfo.wrongColor(1));
    set(editwrongcolor2,'Visible','on');
    set(editwrongcolor2,'String',dotInfo.wrongColor(2));
    set(editwrongcolor3,'Visible','on');
    set(editwrongcolor3,'String',dotInfo.wrongColor(3));
    set(texttarcolor,'String','Correct Target Color');
else
    set(checkboxcolor,'Value',1)
end

if dotInfo.auto(2) == 1
    set(popupdotcoh,'Value',find(dotInfo.cohSet*1000 == dotInfo.coh));
else
    set(popupdotcoh,'Value',length(dotInfo.cohSet) + 1);
end

if dotInfo.auto(3) == 1
    set(popupdotdir,'Value',find(dotInfo.dirSet == dotInfo.dir));
elseif dotInfo.auto(3) == 3
    set(popupdotdir,'Value',length(dotInfo.dirSet) + 1);
    set(checkboxloop,'Value',1);
else
    set(popupdotdir,'Value',length(dotInfo.dirSet) + 1);
end

% if we aren't using a mouse, then making the target area bigger is
% meaningless. Also hold makes no sense.
if isfield(dotInfo,'keyLeft') && ~isempty(dotInfo.keyLeft)
    set(popupitype,'Value',1)
    % touchbig means nothing if using keyboard, and this way we don't have
    % turn a bunch of stuff invisible
    dotInfo.touchbig = [];
elseif isfield(dotInfo,'mouse') && ~isempty(dotInfo.mouse)
    set(checkboxbig,'Visible','on');
    set(checkboxhold,'Visible','on');
    set(popupitype,'Value',2)
else
    set(popupitype,'Value',3)
end

% hold on
if dotInfo.trialtype(2) == 2
    set(checkboxhold,'Value',1);
end

if ~isempty(dotInfo.touchbig)
    set(checkboxbig,'Value',1);
    set(textbig,'Visible','on');
    set(editbig,'Visible','on');
    set(editbig,'String',num2str(dotInfo.touchbig));
end

%Make the GUI visible.
set(dMainFigure,'Visible','on');

% if you close by hitting the x, end experiment
set(dMainFigure,'CloseRequestFcn',{@goEnd_Callback});

% wait to return until we have completed structure
uiwait(dMainFigure);

% nested functions - callbacks

% type of trial
% 1 fixed duration or 2 reaction time
    function popup_type_Callback(phandle,eventdata)
        % Determine the selected data set.
        val = get(phandle,'Value');
        dotInfo.trialtype(1) = val;
        settimestuff;
    end
% 1 hold on or 2 hold off
    function popup_hold_Callback(phandle,eventdata)
        % Determine the selected data set.
        val = get(phandle,'Value');
        % unchecked = 0 = hold on -> 1
        % checked = 1 = hold off -> 2
        dotInfo.trialtype(2) = val + 1;
        settimestuff;
    end
% 1 keyboard or 2 mouse/touch
    function popup_itype_Callback(phandle,eventdata)
        % Determine the selected data set.
        val = get(phandle,'Value');
        dotInfo.trialtype(3) = val;
        settimestuff;
    end

%  coherence callbacks.
    function popup_coh_Callback(phandle,eventdata)
        % Determine the selected data set.
        val = get(phandle,'Value');
        str = get(phandle, 'String');
        if val == length(str) % coherence is randomly chosen
            dotInfo.coh = dotInfo.cohSet(ceil(rand*length(dotInfo.cohSet)))*1000;
            dotInfo.auto(2) = 2;
        else % coherence is chosen by popup
            dotInfo.coh = dotInfo.cohSet(val)*1000;
            dotInfo.auto(2) = 1;
        end
    end

    function new_coh_Callback(phandle,eventdata)
        set(buttondotcoh,'Visible','off');
        set(editdotcoh,'Visible','on');
        set(buttondonecoh,'Visible','on');
    end

    function coh_set_Callback(phandle,eventdata)
        % Determine the selected data set.
        newStr = get(editdotcoh,'String');
        dotInfo.cohSet = str2num(newStr);
        set(popupdotcoh,'String',{dotInfo.cohSet*100 'random'})
        set(buttondotcoh,'Visible','on');
        set(editdotcoh,'Visible','off');
        set(buttondonecoh,'Visible','off');
    end

% direction callbacks.

    function popup_dir_Callback(phandle,eventdata)
        % Determine the selected data set.
        val = get(phandle,'Value');
        str = get(phandle, 'String');
        if val == length(str) % direction is random
            dotInfo.dir = dotInfo.dirSet(ceil(rand*length(dotInfo.dirSet)));
            dotInfo.auto(3) = 2;
        else % direction is set by popup
            dotInfo.dir = dotInfo.dirSet(val);
            dotInfo.auto(3) = 1;
        end
    end

    function new_dir_Callback(phandle,eventdata)
        set(buttondotdir,'Visible','off');
        set(editdotdir,'Visible','on');
        set(buttondonedir,'Visible','on');
    end

    function dir_set_Callback(phandle,eventdata)
        % Determine the selected data set.
        newStr = get(editdotdir,'String');
        dotInfo.dirSet = str2num(newStr);
        set(popupdotdir,'String',{dotInfo.dirSet 'random'})
        set(buttondotdir,'Visible','on');
        set(editdotdir,'Visible','off');
        set(buttondonedir,'Visible','off');
    end

% target positions popup - set manually, or auto, and if auto either with
% the fixation as the center or the aperture
    function popup_tar_Callback(phandle,eventdata)
        % Determine the selected data set.
        val = get(phandle,'Value');
        dotInfo.auto(1) = val;
        if val == 1
            set(textxytar, 'Visible', 'on')
            set(editxytar, 'Visible', 'on')
        else
            set(textxytar, 'Visible', 'off')
            set(editxytar, 'Visible', 'off')
        end
    end

% target colors

    function check_color_Callback(phandle,eventdata)
        % Determine the selected data set.
        val = get(phandle,'Value');
        if val == 1
            set(textwrongcolor,'Visible','off');
            set(editwrongcolor1,'Visible','off');
            set(editwrongcolor2,'Visible','off');
            set(editwrongcolor3,'Visible','off');
            set(texttarcolor,'String','Target Color');
            dotInfo.wrongColor = [];
        else
            set(textwrongcolor,'Visible','on');
            set(editwrongcolor1,'Visible','on');
            set(editwrongcolor2,'Visible','on');
            set(editwrongcolor3,'Visible','on');
            set(texttarcolor,'String','Correct Target Color');
            if ~isempty(dotInfo.wrongColor)
                set(editwrongcolor1,'String',dotInfo.wrongColor(1));
                set(editwrongcolor2,'String',dotInfo.wrongColor(2));
                set(editwrongcolor3,'String',dotInfo.wrongColor(3));
            end
        end
    end

% make touch diameter different from targets
    function popup_big_Callback(phandle,eventdata)
        % Determine the selected data set.
        val = get(phandle,'Value');
        if val == 1
            set(textbig,'Visible','on');
            set(editbig,'Visible','on');
            set(editbig,'String',num2str(dotInfo.touchbig));
        else
            set(textbig,'Visible','off');
            set(editbig,'Visible','off');
        end
    end

    function settimestuff
        % mouse/touch
        if dotInfo.trialtype(3) == 2
            set(checkboxbig,'Visible','on')
            set(checkboxhold,'Visible','on')
            set(edittimefix,'String',num2str(dotInfo.durTime(1)));
            set(edittimetar,'String',num2str(dotInfo.durTime(2)));
            set(edittimedots,'String',num2str(dotInfo.durTime(3)));
            set(editdurdots,'String',num2str(dotInfo.durTime(4)));
            if dotInfo.trialtype(1) == 1 % fixed duration
                if dotInfo.trialtype(2) == 1 % hold on
                    set(textdotsfix, 'Visible', 'on');
                    set(editdotsfix,'String',num2str(dotInfo.durTime(5)));
                    set(editdotsfix, 'Visible', 'on');
                else
                    set(textdotsfix, 'Visible', 'off');
                    set(editdotsfix, 'Visible', 'off');
                end
                set(textfdreport, 'Visible', 'on');
                set(editfdreport,'String',num2str(dotInfo.durTime(6)));
                set(editfdreport, 'Visible', 'on');
                set(textreport, 'Visible', 'off');
                set(editreport, 'Visible', 'off');
            else % reaction time
                set(textreport, 'Visible', 'on');
                set(editreport,'String',num2str(dotInfo.durTime(5)));
                set(editreport, 'Visible', 'on');
                set(textdotsfix, 'Visible', 'off');
                set(editdotsfix, 'Visible', 'off');
                set(textfdreport, 'Visible', 'off');
                set(editfdreport, 'Visible', 'off');
            end
        elseif dotInfo.trialtype(3) == 1 % keypress routines
            % this stuff isn't checked in keyDots, so doesn't matter if it
            % has a value, but shouldn't show it since it would be
            % confusing
            set(checkboxbig,'Visible','off');
            set(checkboxhold,'Visible','off');
            set(textbig,'Visible','off');
            set(editbig,'Visible','off');
            set(texttimefix,'Visible','off');
            set(edittimefix,'Visible','off');
            set(textreport, 'Visible', 'off');
            set(editreport, 'Visible', 'off');
            % this we need to set the values for
            set(edittimetar,'String',num2str(dotInfo.durTime(1)));
            set(edittimedots,'String',num2str(dotInfo.durTime(2)));
            set(editdurdots,'String',num2str(dotInfo.durTime(3)));
            if dotInfo.trialtype(1) == 1 % fixed duration
                set(textdotsfix, 'Visible', 'on');
                set(editdotsfix,'String',num2str(dotInfo.durTime(4)));
                set(editdotsfix, 'Visible', 'on');
                set(textfdreport, 'Visible', 'on');
                set(editfdreport,'String',num2str(dotInfo.durTime(5)));
                set(editfdreport, 'Visible', 'on');
            else % reaction time
                set(textdotsfix, 'Visible', 'off');
                set(editdotsfix, 'Visible', 'off');
                set(textfdreport, 'Visible', 'off');
                set(editfdreport, 'Visible', 'off');
            end
        end
    end
% save function
    function saveDotInfo
        dotInfo.speed = str2num(get(editdotspeed,'String'));
        dotInfo.dotSize = str2num(get(editdotsize,'String'));
        dotInfo.dotColor = [str2num(get(editdotcolor1,'String')) str2num(get(editdotcolor2,'String')) str2num(get(editdotcolor3,'String'))];
        dotInfo.apXYD = str2num(get(editappos,'String'));
        dotInfo.fixXY = str2num(get(editxyfix,'String'));
        dotInfo.fixDiam = str2num(get(editdiamfix,'String'));
        dotInfo.fixColor = [str2num(get(editfixcolor1,'String')) str2num(get(editfixcolor2,'String')) str2num(get(editfixcolor3,'String'))];
        dotInfo.tarXY = str2num(get(editxytar,'String'));
        dotInfo.tarDiam = str2num(get(edittarfix,'String'));
        dotInfo.tarColor = [str2num(get(edittarcolor1,'String')) str2num(get(edittarcolor2,'String')) str2num(get(edittarcolor3,'String'))];
        testcol = get(checkboxcolor,'Value');
        if testcol ~= 1
            dotInfo.wrongColor = [str2num(get(editwrongcolor1,'String')) str2num(get(editwrongcolor2,'String')) str2num(get(editwrongcolor3,'String'))];
        else
            dotInfo.wrongColor = [];
        end
        
        testhold = get(popupitype,'Value');
        % keypress
        if testhold == 1
            dotInfo.trialtype(3) = 1;
            % hold is always one for keypress.
            dotInfo.trialtype(2) = 1;
            dotInfo.keyLeft = KbName('leftarrow');
            dotInfo.keyRight = KbName('rightarrow');
            dotInfo.mouse = [];
            configfile = 'keyDotInfoMatrix.mat';
        else    % mouse/touch
            dotInfo.trialtype(3) = 2;
            dotInfo.keyLeft = [];
            dotInfo.keyRight = [];
            dotInfo.mouse = [1 2];
            configfile = 'dotInfoMatrix.mat';
        end

        % MOVE THIS TO A SEPARATE FUNCTION THAT IS THE CALLBACK FOR ALL OF
        % THE TIMING EDIT BOXES. CHANGE THE VECTOR AS THE USER DOES INSTEAD
        % OF WAITING UNTIL THE END.
        
        % change timing depending on mouse/keypress and reaction time/fixed duration
        % mouse/touch
        if dotInfo.trialtype(3) == 2
            if dotInfo.trialtype(1) == 2 % reaction time
                dotInfo.durTime = [str2num(get(edittimefix,'String')) str2num(get(edittimetar,'String')) str2num(get(edittimedots,'String')) , ...
                    str2num(get(editdurdots,'String')) str2num(get(editreport,'String'))];
            else
                dotInfo.durTime = [str2num(get(edittimefix,'String')) str2num(get(edittimetar,'String')) str2num(get(edittimedots,'String')) , ...
                    str2num(get(editdurdots,'String')), str2num(get(editdotsfix,'String')) str2num(get(editfdreport,'String'))];
            end
        elseif dotInfo.trialtype(3) == 1 % keypress
            if dotInfo.trialtype(1) == 2 % reaction time
                dotInfo.durTime = [str2num(get(edittimetar,'String')) str2num(get(edittimedots,'String')) str2num(get(editdurdots,'String'))];
            else
                dotInfo.durTime = [str2num(get(edittimetar,'String')) str2num(get(edittimedots,'String')) str2num(get(editdurdots,'String')), ...
                    str2num(get(editdotsfix,'String')) str2num(get(editfdreport,'String'))];
            end
        end
        
        savefile = [savepath configfile]
        bigtar = get(checkboxbig,'Value');
        if bigtar
            dotInfo.touchbig = str2num(get(editbig,'String'));
        else
            dotInfo.touchbig = [];
        end
        % if testloop checked, then will be random with correction loop
        % possible, otherwise will be whatever was previously chosen.
        testloop = get(checkboxloop,'Value');
        if testloop
            dotInfo.auto(3) = 3;
        end

        % need to make sure minTime and aperture are updated
        dotInfo.minTime = makeInterval(dotInfo.itype,dotInfo.durTime,dotInfo.imax,dotInfo.imean)
    end

    function save_Callback(ghandle,eventdata)
        saveDotInfo
        fname = ['dotInfo-' date '.mat'];
        [file,path] = uiputfile(fname,'Save config file');
        if file ~= 0
            save([path file],'dotInfo')
        end
    end

    function load_Callback(ghandle,eventdata)
        saveDotInfo
        savefile
        save(savefile,'dotInfo')
    end

% close function
    function goEnd_Callback(ghandle,eventdata)
        delete(dMainFigure)
    end
end
