function [fig, p_values,ci,mu,std_gaussian]  = createFit_NormCDF_mod(coh_list, pc, audInfo, save_name)
%CREATEFIT(COH_LIST,PC_AUD)
%  Create a fit.
%
%  Data for 'untitled fit 1' fit:
%      X Input : coh_list
%      Y Output: pc
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 10-Aug-2022 10:09:38
%% Fit: 'untitled fit 1'.
%fig_color='blue';
fig_color='red';

switch fig_color
    case 'blue'
        fig_modality='Visual';

    case 'red'
        fig_modality='Auditory';

end

[xData, yData] = prepareCurveData( coh_list, pc );

%get frequency of trials corresponding to each coherence 
sizes_L = flip(audInfo.cohFreq_left(2,:)');%Slpit to left and Right 
sizes_R = audInfo.cohFreq_right(2,:)';
all_sizes = nonzeros(vertcat(sizes_L, sizes_R));

if length(xData) ~= length(all_sizes)
    all_sizes = all_sizes(1:length(xData));
end

mu = mean(yData);
sigma =std(yData);
% Adding floor and ceiling to "parms" - lol making me hungry
floor_value = min(yData);
ceiling_value = max(yData);
parms = [mu, sigma, floor_value, ceiling_value];
%old way
%parms = [mu, sigma];

%% Norm CDF Function Fitting (for when equal # of trials per coh per
%% direction)
% fun_1 = @(b, x)cdf('Normal', x, b(1), b(2));
% fun = @(b)sum((fun_1(b,xData) - yData).^2); 
% opts = optimset('MaxFunEvals',50000, 'MaxIter',10000); 
% fit_par = fminsearch(fun, parms, opts);

% old way where 0.5 and 1 were hard coded (naughty naughty)
%non-linear model to add weights to function fit based on # of trials per data point 
% normalcdf_fun = @(b, x) 0.5 * (1 + erf((x - b(1)) ./ (b(2) * sqrt(2))));
% mdl = fitnlm(xData, yData, normalcdf_fun, parms, 'Weights', all_sizes);

% new way where floor and ceiling are based on the data
% Custom response model function
normalcdf_fun_mod = @(b, x) b(3) + (b(1) - b(3)) * exp(-(x - b(2)).^2 / (2 * b(4)^2));

% Fit the model using all parameters
mdl = fitnlm(xData, yData, normalcdf_fun_mod, parms, 'Weights', all_sizes);


curve_xvals = min(xData(:)):.01:max(xData(:));

% Significance of fits 
%[p_values, bootstat,ci] = p_value_calc(yData, parms);



% old way
% curve_yvals = cdf('Normal', curve_xvals, mdl.Coefficients{1,1}, mdl.Coefficients{2,1});
% new way where curve is a modified cdf with floor and ceiling
curve_yvals = normalcdf_fun_mod(mdl.Coefficients.Estimate, curve_xvals);

%get threshold
mu= mdl.Coefficients{2,1};
%get std of cumulative gaussian (reflects the inherent variability of the psychophysical data)
std_gaussian= mdl.Coefficients{4,1};
dy_dx = diff(curve_yvals) ./ diff(curve_xvals); % calculates the slope of the CDF curve by taking the difference between consecutive y-values and dividing by the difference between their corresponding x-values
slope = mean(dy_dx);

% old way
%slope_at_50_percent = 1 / (std_gaussian * sqrt(2 * pi));
% new way using real ceiling, not 1
slope_at_50_percent = ceiling_value / (std_gaussian * sqrt(2 * pi));

% Plot fit with data.
fig = figure( 'Name', 'Psychometric Function' );
scatter(xData, yData, all_sizes,fig_color,'LineWidth',2)
hold on 
plot(curve_xvals, curve_yvals,fig_color,'LineWidth',2.5);
% Label axes
title(sprintf('%s Psych. Func. L&R\n%s',fig_modality,save_name), 'Interpreter','none');
xlabel( 'Coherence ((+)Rightward, (-)Leftward)', 'Interpreter', 'none' );
ylabel( 'Proportion Rightward Response', 'Interpreter', 'none' );
xlim([-max(xData(:)) max(xData(:))])
ylim([0 1])
grid on
ax = gca; 
ax.FontSize = 22;
text(0,.15,"mu: " + mu,'FontSize',22)
text(0,.1, "std cummulative gaussian: " + std_gaussian,'FontSize',22)
text(0,.2, "slope at 50 percent: " + slope_at_50_percent,'FontSize',22)
text(0,.25, "overall slope: " + slope,'FontSize',22)
text(0,.3, "n_trials: " + sum(all_sizes),'FontSize',22, 'Interpreter', 'none' )

legend('% Rightward Resp. vs. Coherence', 'NormCDF', 'Location', 'NorthWest', 'Interpreter', 'none' );

save(save_name,'save_name','xData','yData','mdl');
end
